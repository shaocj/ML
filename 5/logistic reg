LR 损失函数为什么用极大似然函数？
因为我们想要让 每一个 样本的预测都要得到最大的概率， 
即将所有的样本预测后的概率进行相乘都最大，也就是极大似然函数.

对极大似然函数取对数以后相当于对数损失函数， 
由上面 梯度更新 的公式可以看出， 
对数损失函数的训练求解参数的速度是比较快的， 
而且更新速度只和x，y有关，比较的稳定，

为什么不用平方损失函数 
如果使用平方损失函数，梯度更新的速度会和 sigmod 函数的梯度相关，sigmod 函数在定义域内的梯度都不大于0.25，导致训练速度会非常慢。 
而且平方损失会导致损失函数是 theta 的非凸函数，不利于求解，因为非凸函数存在很多局部最优解

 

sigmod函数
##numpy
import numpy as np
y=1/(1+np.exp(-x))
#scipy
from scipy.special import expit,logit
y=expit(x)##因为expit(x)=1/(1+exp(-x))

  # 获得正负样本的下标(即哪些是正样本，哪些是负样本)
    neg = data[:,2] == 0
    pos = data[:,2] == 1
    #print(neg)
    
    if axes == None:
        axes = plt.gca()
    axes.scatter(data[pos][:,0], data[pos][:,1], marker='+', c='k',s=60,  linewidth=2, label=label_pos)
  
    axes.scatter(data[neg][:,0], data[neg][:,1], c='y', s=60, label=label_neg)


1、load_txt()函数用法numpy.loadtxt pandas.read_csv
#保存数据到filename
x = pd.read_csv("data3out.csv",names=['W','X','Y','Z'])
x.to_csv('filename')
#loadtxt生成二维数组
https://www.cnblogs.com/pyxiaomangshe/p/7888961.html
https://www.cnblogs.com/hecc/p/8480532.html

2、scipy.optimize模块用法
https://blog.csdn.net/unixtch/article/details/78545382

3、sklearn.preprocessing模块（数据预处理）
PloynomialFeatures()函数用于生成多项式特征
http://sklearn.apachecn.org/cn/0.19.0/modules/preprocessing.html#preprocessing(sklearn库中文文档)

4、pandas学习
complaints = pd.read_csv(u'/home/hadoop/下载/pandas-cookbook-master/data/311-service-requests.csv')
complaints.head(5)＃显示前５行数据
如果我们只想选择complaint type和borough这两个列的信息不需要其他列，pandas可以很容易做到这一点：
complaints[['Complaint Type', 'Borough']][:10]#查看前10行数据

5、matplotlib 学习
    pyplot模块的内部保存了当前图表以及当前子图等信息。当前的图表和子图可以使用plt.gcf()和plt.gca()获得，分别表示"Get Current Figure"和"Get Current Axes"。
在pyplot模块中，许多函数都是对当前的Figure或Axes对象进行处理。比如说：    plt.plot()实际上会通过plt.gca()获得当前的Axes对象ax，然后再调用ax.plot()方
法实现真正的绘图。
https://blog.csdn.net/pipisorry/article/details/37742423
    plt.scatter()函数用法
https://blog.csdn.net/qq_38486203/article/details/80578260  
     ##加标签
     axes.set_xlabel(label_x)
    axes.set_ylabel(label_y)
    ##显示图例
    Axes.legend(*args, **kwargs)
     axes.legend(frameon= True, fancybox = False)#frameon图例是否加边界框，fancybox边框周围是否启用圆边,
     facecolor背景填充颜色，edgecolor边框线颜色
6、numpy.c_和r_
np.r_是按列连接两个矩阵，就是把两矩阵上下相加，要求列数相等，类似于pandas中的concat()。
np.c_是按行连接两个矩阵，就是把两矩阵左右相加，要求行数相等，类似于pandas中的merge()。
https://blog.csdn.net/yj1556492839/article/details/79031693

7、numpy size函数
a.size=np.size(a)
https://blog.csdn.net/qq_25436597/article/details/79079435

8、numpy.dot(a,b)
两个数组的点积。dot()函数可以通过numpy库调用，也可以由数组实例对象进行调用。a.dot(b) 与 np.dot(a,b)效果相同。
https://www.cnblogs.com/luhuan/p/7925790.html

9、np.isnan()
https://blog.csdn.net/u010158659/article/details/50814706/

10、reshape()
https://www.jianshu.com/p/04a408c3528b

11、numpy下的flatten()函数用法
返回一个折叠成一维的数组。但是该函数只能适用于numpy对象，即array或者mat，普通的list列表是不行的。
a是个矩阵或者数组，a.flatten()就是把a降到一维，默认是按横的方向降。而numpy.ravel()返回的是视图（view，也颇有几分C/C++引用reference的意味），会
响（reflects）原始矩阵。
https://www.cnblogs.com/itdyb/p/5796834.html
https://blog.csdn.net/qq_34690929/article/details/79975558
https://blog.csdn.net/liuweiyuxiang/article/details/78220080

12、A.min()=min(A)
13、numpy.linspace()用法
https://blog.csdn.net/you_are_my_dream/article/details/53493752

14、np.reshape
https://docs.scipy.org/doc/numpy/reference/generated/numpy.reshape.html#numpy-reshape

14、numpy.meshgrid()
从坐标向量返回坐标矩阵。
https://www.cnblogs.com/shanlizi/p/9127878.html

15、列表和数组区别
A = np.array([[2,3,4]])
print(A.shape)
#out:(1, 3)
A = np.array([2,3,4])
print(A.shape)
#out:(3,)

16、sklearn中Polynomialfeatures的用法最直观说明
In[0]:
from sklearn.preprocessing import PolynomialFeatures
import numpy as np
A = np.array([[2,3,4,5]])
print(A.shape)
#out:(1, 3)
#A = np.array([2,3,4])
#print(A.shape)
#out:(3,)
poly = PolynomialFeatures()
B = poly.fit_transform(A)
B
Out[0]:
##A=[[a,b,c,d]]=>B=[[1,a,b,c,d,a^2,ab,ac,ad,b^2,bc,bd,d^2]]
(1, 4)
array([[ 1.,  2.,  3.,  4.,  5.,  4.,  6.,  8., 10.,  9., 12., 15., 16.,
        20., 25.]])
https://blog.csdn.net/tiange_xiao/article/details/79755793

17.plt.subplots()
https://matplotlib.org/api/_as_gen/matplotlib.pyplot.subplots.html?highlight=subplots#matplotlib.pyplot.subplots

18、import numpy as np
In[0]:
A = np.array([[1,2],[2,4]])
B = [[1,2],[2,4]]
print(type(A))
print(type(B))
Out[0]:
<class 'numpy.ndarray'>
<class 'list'>
